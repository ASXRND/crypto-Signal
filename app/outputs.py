""" Handles outputting results to the terminal.
"""

import json
import sys

import structlog


class Output():
    """ Handles outputting results to the terminal.
    """

    def __init__(self):
        """Initializes Output class.
        """

        # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–¥–∏—Ä–æ–≤–∫–∏ stdout –≤ UTF-8 –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ —Ä—É—Å—Å–∫–æ–≥–æ —è–∑—ã–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –≤ Docker.
        try:
            sys.stdout = open(sys.stdout.fileno(), mode='w', encoding='utf-8', buffering=1)
        except Exception:
            pass  # –í –¥–æ–∫–µ—Ä–µ –∏–ª–∏ IDE –º–æ–∂–µ—Ç –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å—Å—è fileno, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É

        self.logger = structlog.get_logger()
        self.dispatcher = {
            'cli': self.to_cli,
            'csv': self.to_csv,
            'json': self.to_json
        }


    def to_cli(self, results, market_pair):
        """–°–æ–∑–¥–∞—ë—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∏ —Ä—É—Å–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –≤—ã–≤–æ–¥ –¥–ª—è CLI"""
        normal_colour = '\u001b[0m'
        hot_colour = '\u001b[31m'
        cold_colour = '\u001b[36m'

        indicator_type_map = {
            'indicators': '–ò–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã',
            'informants': '–ò–Ω—Ñ–æ—Ä–º–∞–Ω—Ç—ã',
            'crossovers': '–ü–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è'
        }
        indicator_desc = {
            'stoch_rsi': 'Stochastic RSI ‚Äî –æ—Å—Ü–∏–ª–ª—è—Ç–æ—Ä, –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–µ—Ä–µ–∫—É–ø–ª–µ–Ω–Ω–æ—Å—Ç—å (>0.8) –∏–ª–∏ –ø–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω–Ω–æ—Å—Ç—å (<0.2).',
            'rsi': 'RSI ‚Äî –∏–Ω–¥–µ–∫—Å –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ–π —Å–∏–ª—ã, –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø–µ—Ä–µ–∫—É–ø–ª–µ–Ω–Ω–æ—Å—Ç–∏/–ø–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω–Ω–æ—Å—Ç–∏.',
            'macd': 'MACD ‚Äî –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä —Å—Ö–æ–∂–¥–µ–Ω–∏—è/—Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏—è —Å–∫–æ–ª—å–∑—è—â–∏—Ö —Å—Ä–µ–¥–Ω–∏—Ö.',
            'mfi': 'MFI ‚Äî –∏–Ω–¥–µ–∫—Å –¥–µ–Ω–µ–∂–Ω–æ–≥–æ –ø–æ—Ç–æ–∫–∞.',
            'obv': 'OBV ‚Äî –æ–±—ä—ë–º –Ω–∞ –±–∞–ª–∞–Ω—Å–µ.',
            'momentum': 'Momentum ‚Äî –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∏–º–ø—É–ª—å—Å–∞.',
            'ichimoku': 'Ichimoku ‚Äî –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä —Ç—Ä–µ–Ω–¥–∞.',
            'sma': 'SMA ‚Äî –ø—Ä–æ—Å—Ç–∞—è —Å–∫–æ–ª—å–∑—è—â–∞—è —Å—Ä–µ–¥–Ω—è—è.',
            'ema': 'EMA ‚Äî —ç–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è —Å–∫–æ–ª—å–∑—è—â–∞—è —Å—Ä–µ–¥–Ω—è—è.',
            'vwap': 'VWAP ‚Äî —Å—Ä–µ–¥–Ω–µ–≤–∑–≤–µ—à–µ–Ω–Ω–∞—è —Ü–µ–Ω–∞ –ø–æ –æ–±—ä—ë–º—É.',
            'bollinger_bands': 'Bollinger Bands ‚Äî –ø–æ–ª–æ—Å—ã –ë–æ–ª–ª–∏–Ω–¥–∂–µ—Ä–∞.'
        }

        output = f'\n–ü–∞—Ä–∞: {market_pair}\n' + '-'*40 + '\n'
        for indicator_type in results:
            rus_type = indicator_type_map.get(indicator_type, indicator_type)
            output += f'{rus_type}:\n'
            for indicator in results[indicator_type]:
                for i, analysis in enumerate(results[indicator_type][indicator]):
                    if not hasattr(analysis['result'], 'shape') or analysis['result'].shape[0] == 0:
                        self.logger.info('–ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è %s #%s', indicator, i)
                        continue

                    colour_code = normal_colour
                    status = ''
                    status_explain = ''
                    if 'is_hot' in analysis['result'].iloc[-1]:
                        if analysis['result'].iloc[-1]['is_hot']:
                            colour_code = hot_colour
                            status = 'üî• –ì–æ—Ä—è—á–æ'
                            status_explain = '–°–∏–≥–Ω–∞–ª: –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –≤ –∑–æ–Ω–µ –ø–µ—Ä–µ–∫—É–ø–ª–µ–Ω–Ω–æ—Å—Ç–∏/–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏.'
                    if 'is_cold' in analysis['result'].iloc[-1]:
                        if analysis['result'].iloc[-1]['is_cold']:
                            colour_code = cold_colour
                            status = '‚ùÑÔ∏è –•–æ–ª–æ–¥–Ω–æ'
                            status_explain = '–°–∏–≥–Ω–∞–ª: –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –≤ –∑–æ–Ω–µ –ø–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω–Ω–æ—Å—Ç–∏/–ø–∞—Å—Å–∏–≤–Ω–æ—Å—Ç–∏.'

                    # –û–ø–∏—Å–∞–Ω–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞
                    desc = indicator_desc.get(indicator, '')

                    if indicator_type == 'crossovers':
                        key_signal = '{}_{}'.format(
                            analysis['config']['key_signal'],
                            analysis['config']['key_indicator_index']
                        )
                        key_value = analysis['result'].iloc[-1][key_signal]
                        crossed_signal = '{}_{}'.format(
                            analysis['config']['crossed_signal'],
                            analysis['config']['crossed_indicator_index']
                        )
                        crossed_value = analysis['result'].iloc[-1][crossed_signal]
                        if isinstance(key_value, float):
                            key_value = format(key_value, '.8f')
                        if isinstance(crossed_value, float):
                            crossed_value = format(crossed_value, '.8f')
                        formatted_string = f'{key_value} / {crossed_value}'
                        output += f"  {colour_code}{indicator} #{i}: {formatted_string} {status}{normal_colour}\n"
                        if desc:
                            output += f"    ‚Üí {desc}\n"
                        if status_explain:
                            output += f"    ‚Üí {status_explain}\n"
                    else:
                        formatted_values = []
                        for signal in analysis['config']['signal']:
                            value = analysis['result'].iloc[-1][signal]
                            if isinstance(value, float):
                                formatted_values.append(format(value, '.8f'))
                            else:
                                formatted_values.append(str(value))
                        formatted_string = ' / '.join(formatted_values)
                        output += f"  {colour_code}{indicator} #{i}: {formatted_string} {status}{normal_colour}\n"
                        if desc:
                            output += f"    ‚Üí {desc}\n"
                        if status_explain:
                            output += f"    ‚Üí {status_explain}\n"
        output += '-'*40 + '\n'
        return output


    def to_csv(self, results, market_pair):
        """Creates the csv to output to the CLI

        Args:
            market_pair (str): Market pair that this message relates to.
            results (dict): The result of the completed analysis to output.

        Returns:
            str: Completed CSV message
        """

        self.logger.warning('WARNING: CSV output is deprecated and will be removed in a future version')

        output = str()
        for indicator_type in results:
            for indicator in results[indicator_type]:
                for i, analysis in enumerate(results[indicator_type][indicator]):
                    value = str()

                    if indicator_type == 'crossovers':
                        key_signal = '{}_{}'.format(
                            analysis['config']['key_signal'],
                            analysis['config']['key_indicator_index']
                        )

                        key_value = analysis['result'].iloc[-1][key_signal]

                        crossed_signal = '{}_{}'.format(
                            analysis['config']['crossed_signal'],
                            analysis['config']['crossed_indicator_index']
                        )

                        crossed_value = analysis['result'].iloc[-1][crossed_signal]

                        if isinstance(key_value, float):
                            key_value = format(key_value, '.8f')

                        if isinstance(crossed_value, float):
                            crossed_value = format(crossed_value, '.8f')

                        value = '/'.join([key_value, crossed_value])
                    else:
                        for signal in analysis['config']['signal']:
                            value = analysis['result'].iloc[-1][signal]
                            if isinstance(value, float):
                                value = format(value, '.8f')

                    is_hot = str()
                    if 'is_hot' in analysis['result'].iloc[-1]:
                        is_hot = str(analysis['result'].iloc[-1]['is_hot'])

                    is_cold = str()
                    if 'is_cold' in analysis['result'].iloc[-1]:
                        is_cold = str(analysis['result'].iloc[-1]['is_cold'])

                    new_output = ','.join([
                        market_pair,
                        indicator_type,
                        indicator,
                        str(i),
                        value,
                        is_hot,
                        is_cold
                    ])

                    output += '\n{}'.format(new_output)

        return output


    def to_json(self, results, market_pair):
        """Creates the JSON to output to the CLI

        Args:
            market_pair (str): Market pair that this message relates to.
            results (dict): The result of the completed analysis to output.

        Returns:
            str: Completed JSON message
        """

        self.logger.warning('WARNING: JSON output is deprecated and will be removed in a future version')

        for indicator_type in results:
            for indicator in results[indicator_type]:
                for index, analysis in enumerate(results[indicator_type][indicator]):
                    results[indicator_type][indicator][index]['result'] = analysis['result'].to_dict(
                        orient='records'
                    )[-1]

        formatted_results = { 'pair': market_pair, 'results': results }
        output = json.dumps(formatted_results)
        output += '\n'
        return output
